/*
 * File: app/controller/navigation.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Case.controller.navigation', {
    extend: 'Ext.app.Controller',
    alias: 'controller.navigation',

    requires: [
        'Ext.route.Route'
    ],

    views: [
        'dialogeditcategory'
    ],

    routes: {
        'catalogs': {
            name: 'catalogs',
            action: 'showtree'
        },
        'categories': 'showCategoriesPage',
        'categories/edit': 'categoryedit',
        'emploees': 'showEmploeeList',
        'directions': 'showDirections',
        'reports': 'showReports'
    },

    refs: {
        mainView: 'mainview',
        editCategory: 'dialogeditcategory',
        categoryContainer: 'categoriescontainer'
    },

    getWorkspace: function() {
        return this.getMainView().getReferences().workspace;
    },

    showtree: function() {
        let workspace = this.getWorkspace();
        let container = Ext.create({
            xtype: 'panel',
            title:"Katalog tovarov",
            header:{
              hidden:true
            },
            layout: 'hbox',







        });

        container.add({
            xtype: 'categorytree',
            flex:1

        });

        container.add({
            xtype: 'productgrid',
            flex:4

        });

         workspace.push(container);

    },

    showCategoriesPage: function() {
         let workspace = this.getWorkspace();


                 workspace.push({xtype:'categoriescontainer'});
    },

    categoryedit: function() {
        var me= this;
        if(me.getWorkspace().getActiveItem()){
           console.log('if');
        }else{
            me.getWorkspace().push({xtype:'categoriescontainer'});
        }
        //me.getWorkspace().push({xtype:'categoriescontainer'});
        let dialog=Ext.create({
           xtype: 'dialogeditcategory'});
        let categorycontainer =me.getCategoryContainer();

        var categoryrecord= categorycontainer.getViewModel().get('crecordtree');
        console.log(categorycontainer);
        let podstore= Case.app.getStore('podcategory');
        let editcombostore= Case.app.getStore('categoryEditCombo');

        editcombostore.addListener({
            load: me.oneditstore,
            scope:me

        });

        podstore.addListener({
            load: me.onstoreload,
            scope:me

        });
        podstore.load();
        console.log(podstore);
        ///var me = this;

        let ell = document.getElementsByClassName("x-navigationview");

        let widthcalculate = ell[0].offsetWidth;
        let heightcalculate = ell[0].offsetHeight;
        dialog.setConfig('width',widthcalculate);

        dialog.setConfig('height',heightcalculate);
        dialog.setConfig('buttons',{
                      ok: function () {
                          Ext.History.back();

                        dialog.destroy();

                       }
                   });



        dialog.down('formpanel').setViewModel({data:{crecordtree:categoryrecord}});

        dialog.show();


    },

    onstoreload: function(thiss, records, successful, operation, eOpts) {
        var me= this;

        let categorycontainer =me.getCategoryContainer();

        var element =[];
        var categoryrecord= categorycontainer.getViewModel().get('crecordtree').data.id;
        console.log(categoryrecord);
        var arr =[];


        this.recurse(records,categoryrecord,arr,me);

        arrnew=[];
                 arr.forEach(function(item, i, arr) {
                    arrnew.push(item.data);

                 });
        console.log(arrnew);
        thiss.setData(arr);


    },

    recurse: function(rec, categoryrec, arr, mee) {
        if(rec) {
        rec.forEach(function(item, i, records) {

                        if(item.data.id==categoryrec){
                         item.data.expanded=true;
                          arr.push(item);


                        }
            if(item.childNodes){
                           mee.recurse(item.childNodes,categoryrec,arr,mee);}



                });}
    },

    oneditstore: function(thiss, records, successful, operation, eOpts) {
         var me= this;

                let categorycontainer =me.getCategoryContainer();
                console.log(records);
                var element =[];
                var categoryrecord= categorycontainer.getViewModel().get('crecordtree').data.id;
                console.log(categoryrecord);
                var arr =[];

                arr=records;
        console.log(arr);
        function recurse(rec,  categoryrec) {
                if(rec) {
                rec.forEach(function(item, i, rec) {

                                       if((item.data.id)&&item.data.id==categoryrec){
                                           delete rec[i];
                                       }
                                if((item.data.parent_id)&&item.data.parent_id==categoryrec){


                                 delete rec[i];
                                  recurse(rec,item.data.id);


                                }



                        });}
            }




        recurse(arr,categoryrecord );
        arrnew=[];
         arr.forEach(function(item, i, arr) {
            arrnew.push(item.data);

         });
        thiss.setData(arrnew);

        console.log(thiss.getData());





    },

    showEmploeeList: function() {
        let workspace = this.getWorkspace();
        let container = Ext.create({
            xtype: 'panel',
            title:"Katalog tovarov",
            header:{
              hidden:true
            },
            layout: 'hbox',







        });

        container.add({
            xtype: 'directionlist',
            flex:1

        });

        container.add({
            xtype: 'eploeegrid',
            flex:6

        });

         workspace.push(container);

    },

    showDirections: function() {
         let workspace = this.getWorkspace();
                let container = Ext.create({
                    xtype: 'panel',
                    title:"Katalog tovarov",
                    header:{
                      hidden:true
                    },
                    layout: 'hbox',







                });

                container.add({
                    xtype: 'directionsgrid',
                    flex:1

                });



                 workspace.push(container);

    },

    showReports: function() {
         let workspace = this.getWorkspace();




                         workspace.push({
                            xtype: 'reports',
                            flex:1

                        });


    }

});