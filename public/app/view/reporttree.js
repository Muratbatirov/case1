/*
 * File: app/view/reporttree.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Case.view.reporttree', {
    extend: 'Ext.grid.Tree',
    alias: 'widget.reporttree',

    requires: [
        'Case.view.reporttreeViewModel',
        'Ext.grid.column.Tree',
        'Ext.Toolbar'
    ],

    viewModel: {
        type: 'reporttree'
    },
    height: '100%',
    width: '100%',
    layout: 'hbox',
    store: 'reports',

    columns: [
        {
            xtype: 'treecolumn',
            flex: 1,
            dataIndex: 'name',
            text: 'Название направлении'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {
                function recurse(rec) {
                    let count = 0;
                    if (rec.hasChildNodes()) {

                        rec.childNodes.forEach( function(item, i, arr) {
                            count += item.data.currentnum + recurse(item);


                        });


                        return count;


                    } else {

                        return record.data.currentnum;

                    }
                }

                return recurse(record);
            },
            flex: 1,
            name: 'currentnum',
            dataIndex: 'currentnum',
            text: 'Кол-во работающих сотрудников'
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, record, dataIndex, cell, column) {
                function recurse(rec) {
                    let count = 0;
                    if (rec.hasChildNodes()) {

                        rec.childNodes.forEach( function(item, i, arr) {
                            count += item.data.exitnum + recurse(item);


                        });


                        return count;


                    } else {

                        return record.data.exitnum;

                    }
                }

                return recurse(record);
            },
            flex: 1,
            name: 'exitnum',
            dataIndex: 'exitnum',
            text: 'Кол-во уволенных сотрудников'
        }
    ],
    items: [
        {
            xtype: 'toolbar',
            docked: 'top',
            title: 'Отчёты по направлениям'
        }
    ]

});